---
- name: Pull config repository
  hosts: localhost

  vars:
    config_repo_url: "git@github.com:zjleblanc/{{ config_repo_name }}.git"

  tasks:
    - name: Pull the config repo
      ansible.builtin.include_role:
        name: git
        tasks_from: pull.yml
      vars:
        git_url: "{{ config_repo_url }}"
        git_key: "{{ git_ssh_key }}"
        git_branch: master

- name: Apply group configurations
  hosts: "{{ (_groups | length) | ternary(_groups, omit) }}"
  gather_facts: false

  vars:
    configs_dir: "{{ playbook_dir }}/{{ config_repo_name }}/configs/groups"

  tasks:
    - name: Get groups with config changes
      ansible.builtin.set_fact:
        groups_with_changes: "{{ group_names | intersect(_groups) }}"

    - name: Apply group config changes
      loop: "{{ group_names | intersect(_groups) }}"
      loop_control:
        loop_var: group_name
      ansible.builtin.include_tasks:
        file: tasks/apply_group_config.yml

- name: Apply host specific configurations
  hosts: "{{ (_hosts | length) | ternary(_hosts, omit) }}"
  gather_facts: false

  vars:
    config_path: "{{ playbook_dir }}/{{ config_repo_name }}/configs/{{ inventory_hostname }}.config.yml"

  tasks:
    - name: Check for backup config
      ansible.builtin.stat:
        path: "{{ config_path }}"
      register: r_config_path

    - name: Notify when backup does not exist
      when: not r_config_path.stat.exists
      ansible.builtin.debug:
        msg: "No backup exists for {{ inventory_hostname }} at expected path: {{ config_path }}"

    - name: Restore device configs from the backup
      when: r_config_path.stat.exists
      block:
        - name: Apply resource config
          when: 
            - resource.value != {}
            - resource.value != []
          loop: "{{ lookup('file', config_path) | from_yaml | dict2items }}"
          loop_control:
            loop_var: resource
            label: "{{ resource.key }}"
          ansible.netcommon.network_resource:
            name: "{{ resource.key }}"
            config: "{{ resource.value }}"
            state: overridden

- name: Cleanup backup repository
  hosts: localhost

  tasks:
    - name: Cleanup the repo
      ansible.builtin.file:
        path: "{{ playbook_dir }}/{{ config_repo_name }}"
        state: absent
