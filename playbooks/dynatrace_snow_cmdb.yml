---
- name: Populate Service Now CMDB with Network Devices
  hosts: localhost
  gather_facts: false
  become: false

  vars:
    record_limit: 5
    dynatrace_debug: false

  tasks:
    - name: Get data from Dynatrace
      ansible.builtin.include_tasks:
        file: tasks/dynatrace_snmp.yml
        apply:
          no_log: "{{ not dynatrace_debug }}"

    - name: Add Palo Devices
      when:
        - palo_device_data['state'] == 'SUCCEEDED'
        - palo_device_data['result']['records'] | length > 0
      loop: "{{ palo_device_data['result']['records'][:record_limit] }}"
      loop_control:
        loop_var: dev
        label: "{{ dev['id'] }}"
      register: r_palo_devices
      servicenow.itsm.configuration_item:
        sys_class_name: cmdb_ci_vm_object
        name: "{{ dev['id'] }}"
        short_description: "{{ dev['entity.name'] }}, port {{ dev['DevicePort'] }}, (populated by ansible)"
        ip_address: "{{ dev['entity.name'] }}"
        category: Palo Alto Network Device
        other:
          object_id: "{{ dev['id'] }}"
          discovery_source: "Dynatrace + Ansible"
          location: "{{ dev | find_location }}"

    - name: Create list of locations
      ansible.builtin.set_fact:
        palo_locations: "{{ r_palo_devices.results | json_query('[].record.location') | new_locations }}"

    - name: Create locations # noqa ignore-errors
      loop: "{{ palo_locations }}"
      ignore_errors: true
      servicenow.itsm.api:
        resource: cmn_location
        action: post
        data:
          name: "{{ item }}"

    - name: Create locations
      ansible.builtin.include_role:
        name: mgmt.snow_configuration.records
      vars:
        snow_records: "{{ palo_locations }}"
